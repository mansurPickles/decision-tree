import math
import pandas as pd

def reader():
    df = pd.read_csv("data1.csv", skiprows=1, names=['job', 'insurance', 'votes', 'action'])
    return df

def createSubset(df, col1, mark1, col2, mark2):
    col3 = df.loc[(df[col1] == mark1) & (df[col2] == mark2)]
    return col3

def getLables(col):
    labels = []

    for label in col:
        unique = True
        for i in range(len(labels)):
            if (label == labels[i]):
                unique = False
        if(unique == True):
            labels.append(label)

    return labels


def createNode(df, control, attributes):
    row_size = df.shape[0]
    col_size = df.shape[1]

    flag = getLables(df[control])
    #get labels
    labels = []
    subset = []
    subsetToPass = []
    labelCount = []

    for i in range(len(attributes)):
        row = getLables(df[attributes[i]])
        labels.append(row)

    for j in flag:
        for i in range(len(attributes)):
        # for j in flag:
            for k in labels[i]:
                print(f'control: {control} | boolean: {j}, | attribute: {attributes[i]} | boolean: {k}')
                sub = createSubset(df,control,j,attributes[i],k)
                labelCount.append(len(sub))
                subset.append(sub)
            temp = list(subset)
            subsetToPass.append(temp)

            subset.clear()
    return subsetToPass, labelCount


def entropy(labelCount):

    labelCountSize = len(labelCount)
    size = 0
    e = 0

    returnLabelCount = []
    print(f'in entropy: {labelCount}')

    for i in range(labelCountSize):
        size += labelCount[i]
        returnLabelCount.append(labelCount[i])
    print(f'size: {size}')

    for i in range(labelCountSize):

        if (labelCount[i]!=0):
            e += math.log(labelCount[i]/size,2) * labelCount[i]/size
        else:
            e = 0

    e = abs(e)
    return e, returnLabelCount

def printTree(tree):
    str = ' '*3
    str+= tree[0].__str__()
    print(str)
    str = tree[1].__str__()
    str += ' '*5
    str += tree[2].__str__()
    print(str)

def findRoot(df, attribute):


    tree = [-1]*10

    copyAttribute = attribute.copy()

    goal = [attribute[-1]]
    attribute = attribute[0:-1]
    col = df[attribute[-1]]
    labels = getLables(col)
    entropySet = []
    potentialNodes = [] #what actually matters

    #find entropy of system
    val = col.value_counts()

    system = []
    system_size = 0
    for i in range(len(val)):
        system.append(val[i])
        system_size += val[i]
    es,trash = entropy(system)
    print(f'entropy of system {es}')
    print(f'system size: {system_size}')

    sizeCount = []


    for i in range(len(attribute)):
        start = 0
        cand, labelCount = createNode(df, attribute[i], goal)
        print('retruend')
        mark = len(labels)
        print(labelCount)
        index = 0
        while(start!=len(labelCount)):
            temp = labelCount[start: (start+mark)]
            e,tempSize = entropy(temp)
            entropySet.append(e)
            start += mark
            sizeCount.append(tempSize)
            print(f'entropy {e}')
        print('size count')
        print(sizeCount)

        #lets get averages
        temp2 = averageInformation(sizeCount,entropySet,system_size)
        informationGain = es - temp2
        potentialNodes.append(informationGain)
        entropySet.clear()
        sizeCount.clear()

    #get max
    a = max(potentialNodes)

    counter = 0
    for i in potentialNodes:
        if (i != a):
            counter += 1

    #thats the best node
    # print(counter)
    tree[0] = counter

    nodeLabel = attribute[counter]
    subset = df[nodeLabel]
    nodeLabels = subset.value_counts()

    subsetAttribute = attribute.remove(nodeLabel)
    # print('node labels')
    # print(nodeLabels)

    #recursive part
    for i in range(len(nodeLabels)):
        temp_subset = df.loc[df[nodeLabel] == i]
        # print(temp_subset)
        systemSize = createSubset(temp_subset,copyAttribute[counter], i, copyAttribute[-1], i)
        # print(systemSize)
        systemSize = (len(systemSize))

        # print(f'system size: {systemSize}')
        leaf = recursiveHelper(df, temp_subset, subsetAttribute, goal, systemSize, nodeLabels.index[i],  tree, i+1)
        print(leaf)



    printTree(tree)

def recursiveHelper(df, subset, attribute, goal, systemSize, leafValue,  tree, index):

    nodeLabels = leafValue

    if systemSize == 0:
        # return f' leaf {leafValue}'
        tree[index] = leafValue
        return {leafValue}

    else:
        labels = []
        control = 'action'
        labelCount = []
        subsetToPass = []

        for i in range(len(attributes)):
            row = getLables(df[attributes[i]])
            labels.append(row)

        for i in range(len(attributes)):
            # for j in flag:
            for k in labels[i]:
                print(f'control: {control} | boolean: {leafValue}, | attribute: {attributes[i]} | boolean: {k}')
                sub = createSubset(df, control, leafValue, attributes[i], k)
                if(len(sub) == 0):
                    return leafValue

                else:
                    labelCount.append(len(sub))
                    subset.append(sub)
                    temp = list(subset)
            subsetToPass.append(temp)

    return findRoot(subsetToPass,attribute)

def averageInformation(labelCount, entropySet, systemSize):
    labelCountSize = len(entropySet)
    runningTally = 0
    for i in range(len(labelCount)):
        temp = 0
        for j in range(labelCountSize):
            a = labelCount[i][j]
            temp += a
        temp = temp/systemSize
        runningTally += temp * entropySet[i]

    print(f'average: {runningTally}')
    return runningTally



df = reader()
attributes = ['job', 'insurance', 'votes', 'action']
findRoot(df, attributes)
