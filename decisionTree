import math
import pandas as pd

def reader():
    df = pd.read_csv("data1.csv", skiprows=1, names=['job', 'insurance', 'votes', 'action'])
    return df

def createSubset(df, col1, mark1, col2, mark2):
    col3 = df.loc[(df[col1] == mark1) & (df[col2] == mark2)]
    return col3

def getLables(col):
    labels = []

    for label in col:
        unique = True
        for i in range(len(labels)):
            if (label == labels[i]):
                unique = False
        if(unique == True):
            labels.append(label)

    return labels

def getLabelCount(sub, flag):
    pass

def createNode(df, control, attributes):
    row_size = df.shape[0]
    col_size = df.shape[1]

    flag = getLables(df[control])
    #get labels
    labels = []
    subset = []
    subsetToPass = []
    labelCount = []

    for i in range(len(attributes)):
        row = getLables(df[attributes[i]])
        labels.append(row)

    for j in flag:
        for i in range(len(attributes)):
        # for j in flag:
            for k in labels[i]:
                print(f'control: {control} | boolean: {j}, | attribute: {attributes[i]} | boolean: {k}')
                sub = createSubset(df,control,j,attributes[i],k)
                labelCount.append(len(sub))
                # print(sub)
                # print(f'count of label: {len(sub)}')
                subset.append(sub)
            temp = list(subset)
            subsetToPass.append(temp)

            # print('************' * 10)
            # print(subsetToPass)
            subset.clear()
            # subsetToPass.clear()

    # print(subsetToPass)

    # print(f'label count:')
    # print(labelCount)
    return subsetToPass, labelCount


def entropy(labelCount):

    labelCountSize = len(labelCount)
    size = 0
    e = 0

    returnLabelCount = []
    print(f'in entropy: {labelCount}')

    for i in range(labelCountSize):
        size += labelCount[i]
        returnLabelCount.append(labelCount[i])
    print(f'size: {size}')

    for i in range(labelCountSize):

        if (labelCount[i]!=0):
            e += math.log(labelCount[i]/size,2) * labelCount[i]/size
        else:
            print('shouldnt be here')
            e = 0

    e = abs(e)
    return e, returnLabelCount

def findRoot(df, attribute):
    goal = [attribute[-1]]
    attribute = attribute[0:-1]
    col = df[attribute[-1]]
    labels = getLables(col)
    entropySet = []
    potentialNodes = [] #what actually matters

    #find entropy of system
    val = col.value_counts()

    system = []
    system_size = 0
    for i in range(len(val)):
        system.append(val[i])
        system_size += val[i]
    es,trash = entropy(system)
    print(f'entropy of system {es}')
    print(f'system size: {system_size}')

    sizeCount = []


    for i in range(len(attribute)):
        start = 0
        cand, labelCount = createNode(df, attribute[i], goal)
        print('retruend')
        mark = len(labels)
        print(labelCount)
        index = 0
        while(start!=len(labelCount)):
            temp = labelCount[start: (start+mark)]
            e,tempSize = entropy(temp)
            entropySet.append(e)
            start += mark
            sizeCount.append(tempSize)
            print(f'entropy {e}')
        print('size count')
        print(sizeCount)

        #lets get averages
        temp2 = averageInformation(sizeCount,entropySet,system_size)
        informationGain = es - temp2
        potentialNodes.append(informationGain)
        entropySet.clear()
        sizeCount.clear()

    #get max
    a = max(potentialNodes)

    counter = 0
    for i in potentialNodes:
        if (i != a):
            counter += 1

    #thats the best node
    print(counter)



def averageInformation(labelCount, entropySet, systemSize):
        labelCountSize = len(entropySet)
        runningTally = 0
        for i in range(len(labelCount)):
            temp = 0
            for j in range(labelCountSize):
                a = labelCount[i][j]
                temp += a
            temp = temp/systemSize
            runningTally += temp * entropySet[i]

        print(f'average: {runningTally}')
        return runningTally



def play():
    darray = [[]]


    darray[0].append([0,10,20])

    darray.append([0,12,24])

    print(darray)
    print(len(darray))

def run():

    row_size = df.shape[0]
    col_size = df.shape[1]
    attributes = ['job', 'insurance', 'votes']

    print(row_size)
    print(col_size)


    for i in attributes:
        pos1 = 0
        pos2 = 0
        neg1 = 0
        neg2 = 0

        print(f' attribute: {i}: boolean: pos')
        col1 = (createSubset(df,i, 1, 'action', 1))
        print(col1)
        print(f' attribute: {i}: boolean: neg')
        col2 = (createSubset(df,i, 1, 'action', 0))
        print(col2)
        pos1 += len(col1)
        neg1 += len(col2)
        print(f'positive: {pos1}')
        print(f'negatiev: {neg1}')


        print(f' attribute: !{i}: boolean: 0_pos')
        col3 = (createSubset(df,i, 0, 'action', 1))
        print(col3)
        print(f' attribute: !{i}: boolean: 0_neg')
        col4 = (createSubset(df,i, 0, 'action', 0))
        print(col4)
        pos2 += len(col3)
        neg2 += len(col4)
        print(f'positive: {pos2}')
        print(f'negatiev: {neg2}')


df = reader()
attributes = ['job', 'insurance', 'votes', 'action']
findRoot(df, attributes)
